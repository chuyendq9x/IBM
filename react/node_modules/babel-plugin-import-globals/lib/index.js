'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = function (_ref) {
  var t = _ref.types;

  return {
    pre: function pre(file) {
      var opts = this.opts;
      if (!(opts && (typeof opts === 'undefined' ? 'undefined' : (0, _typeof3.default)(opts)) === 'object' && (0, _keys2.default)(opts).every(function (key) {
        return opts[key] && (typeof opts[key] === 'string' || (0, _typeof3.default)(opts[key]) === 'object' && typeof opts[key].moduleName === 'string' && typeof opts[key].exportName === 'string');
      }))) {
        throw new Error('Invalid config options for babel-plugin-import-globals, espected a mapping from global variable name ' + 'to either a module name (with a default export) or an object of the type {moduleName: string, ' + 'exportName: string}.');
      }
    },

    visitor: {
      ReferencedIdentifier: function ReferencedIdentifier(path, state) {
        var node = path.node,
            scope = path.scope;

        if (scope.getBindingIdentifier(node.name)) return;
        var opts = this.opts;
        var name = node.name;
        if (!(name in opts) || typeof opts[name] !== 'string' && (0, _typeof3.default)(opts[name]) !== 'object') {
          return;
        }

        var source = typeof opts[name] === 'string' ? { moduleName: opts[name], exportName: 'default' } : opts[name];

        var newIdentifier = state.addImport(source.moduleName, source.exportName, name);

        path.replaceWith(node.type === 'JSXIdentifier' ? t.jSXIdentifier(newIdentifier.name) : newIdentifier);
      }
    }
  };
};